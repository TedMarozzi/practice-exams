¬===================================================== Question 1 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================

------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------
Abstraction is the process of hiding the details of implementaion from the user of your code and only revealling what is
necessary for them to use your class (e.g Inputs and outputs).

One of the ways to achieve abstraction in Object Orientated Programming is the use of abstract classes and abstract
methods.

This enables people using your abstract class to create a class inheriting details in which they need not know and 
implementing strictly only the necassary components with overidden methods for example.

This is useful because the 'thinking' only needs to be done once to create the abstract classs however after it is 
created then it may be used many times saving time and preventing errors.

------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                          
------------------------------------------------------------------------------------------------------------------------
An immutable class is a class without state.

In java an immutable class will have the final keyword before the class name in its decleration.

The class may not have any variables that are not final otherwise state could be changed.

This ensures that the class will always act consistently. For example if you call a method with the same input it will 
always produce the same result.

------------------------------------------------------------------------------------------------------------------------
                                                         Part C                                                          
------------------------------------------------------------------------------------------------------------------------
Useful for when you want to let the user create subclasses of a superclass but want the exact subclass to be chosen be
 decided at runtime.

 In the factory pattern you have a main class in which the user creates a new instance of the factory class which
 encapsulates object creation of your desired subclasses. Next you have a (typically) abstract super class with multiple
  subclasses that inherit from your super class.

 The factory can now be created and passed in some input to determine which subclass to create at runtime and return the class.

 A good example of this would be a chess game in which a user has pushed a pawn to the opposite end of the board and now want to
 promote the pawn to either rook, queen, knight or bishop. Here a super class called piece would be good with all of the pieces
 inheriting from it. A pieceFactory class that has been created at the beginning of the game can know be used to wait for the user
 input what piece they want by clicking the appropriate symbol and depending on the piece decided the factory will return the piece
 in place of the pawn.

------------------------------------------------------------------------------------------------------------------------
                                                         Part D                                                          
------------------------------------------------------------------------------------------------------------------------
This code returns a list of unique plagues that killed more than 1000000 people in the given people list and assigns that
list to the variable deadlyPlagueNames. This code might be useful for extracting the different plagues that a given population has been susceptiple to and thus determining
the likelihood of immunity to plagues we might see in the future.

"people" is a list of class Person.
.stream() enables us to call methods on each object in the list.
.map(person -> person.getPlague()) turns each person in the list into a plague (an attribute of the Person class)
.filter(plague -> plague.getNumDeaths() > 1000000) reduces the list to only plagues with > 1000000  deaths.
.map(plague -> plague.getName()) converts the list of Plagues to a stream of strings of plague names.
.collect(Collectors.toList()); This removes duplicates and converts the stream back to a list.


==================================================== End Question 1 ====================================================



¬===================================================== Question 2 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================
------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------
public abstract class Lannisters.WesterosPerson {

    private static int age;
    private static String name;

    protected Lannisters.WesterosPerson(int age, String name)
    {
        this.age = age;
        this.name = name;
    }
}

import java.util.ArrayList;
import java.util.List;

public class Lannisters.RoyalPerson extends Lannisters.WesterosPerson {

    private int wealth;
    private static final int MAX_CASTLES = 3;

    public Lannisters.Castle[] castles = new Lannisters.Castle[MAX_CASTLES];


    private List<Lannisters.Servant> servants = new ArrayList<>();


    public Lannisters.RoyalPerson(int age, String name) {
        super(age, name);

    }

    public void demandServant(Lannisters.Servant servant)
    {
        servant.serve(this);
        servants.add(servant);
    }

    public void aquireCastle(Lannisters.Castle castle)
    {
        castles[numCastles++] = castle;
    }



}

import java.util.ArrayList;
import java.util.List;

public class Lannisters.Castle {

    private static double value;
    private List<Lannisters.Guard> guards = new ArrayList<>();

    public Lannisters.Castle(double value)
    {
        this.value = value;
    }

    public void addGuard(Lannisters.Guard guard)
    {
        guards.add(guard);


    }
}

public abstract class Lannisters.SlavePerson extends Lannisters.RoyalPerson {

    private static double cost;
    private static boolean isPassive = true;

    protected Lannisters.SlavePerson(int age, String name) {
        super(age, name);
    }

}

public class Lannisters.Guard extends Lannisters.SlavePerson {

    private Lannisters.Castle guarding;
    public Lannisters.Guard(int age, String name) {
        super(age, name);

    }

}

public class Lannisters.Servant extends Lannisters.SlavePerson {

    private Lannisters.WesterosPerson master;

    public Lannisters.Servant(int age, String name) {
        super(age, name);
    }

    public void serve(Lannisters.WesterosPerson person)
    {
        master = person;
    }
}




------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                         
------------------------------------------------------------------------------------------------------------------------
Test that a royal can own up to 3 castles.
Create 3 castles, and use the aquireCastle method in royal person class three times and print the contents of the list.
Three unique castle names.
Test that a servant can serve another servant.
Create two servants and employ the servant1.serve(servant2) and print the master name of servant1
name of servant2.
==================================================== End Question 2 ====================================================
 


¬===================================================== Question 3 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================
------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------



package SelfDrivingCar;

public abstract class Sensor {

    private final String id;
    private double measurement = 0.00;


    public Sensor(String id)
    {
        this.id = id;
    }

    public String getId() {
        return id;
    }

    public double measure()
    {
        return measurement;
    }

}



------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                          
------------------------------------------------------------------------------------------------------------------------
package SelfDrivingCar;

import java.util.ArrayList;
import java.util.List;

public class Car {

    private boolean poweredOn = false;
    private List<Sensor> sensors = new ArrayList<>();
    private static final double dangerThreshold = 0.00;
    private static final double MINIMUM_SENSORS = 3;
    private static final double MAX_DANGER_SENSORS = 7;

    public Car()
    {

    }

    private int measureSensors()
    {
        int numHighDanger = 0;
        for(Sensor sensor: sensors)
        {
            System.out.println("Sensor [" + sensor.getId() + "]: " + sensor.measure());
            if(sensor.measure() > dangerThreshold)
            {
                numHighDanger++;
            }
        }
        System.out.println(numHighDanger + " sensors above threshold");

        return numHighDanger;
    }

    private boolean dangerImminent()
    {
        return sensors.size() <= MINIMUM_SENSORS || measureSensors() >= MAX_DANGER_SENSORS;
    }

    private void run()
    {
        if(!poweredOn && !dangerImminent())
        {
            poweredOn = true;
        }

        if(dangerImminent())
        {
            poweredOn = false;
        }

        operate();
    }


}


==================================================== End Question 3 ====================================================



¬===================================================== Question 4 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================
------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------
public String decode(String message, String language, Map<String, Map<String,String>> map) throws Exception {
        int i = 0, j = 4;
        Map<String, String> dictionary;

        if(!map.containsKey(language))
        {
            System.out.println("LanguageNotFoundException: '" + language + "' not found");
            throw LanguageNotFoundException;
        }

        dictionary = map.get(language);



        String code, output = "", outputWord;
        while(message.length() >= j) {
            code = message.substring(i, j);

            if(!map.containsKey(code))
            {
                System.out.println("CodeNotFoundException: '" + code + "' not found in "
                    + language + " dictionary");
                throw CodeNotFoundException;
            }
            outputWord = dictionary.get(code);

            output += outputWord;


            i+=4;
            j+=4;
        }

        System.out.println(outputWord);

        return output;

    }


------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                          
------------------------------------------------------------------------------------------------------------------------
public class WordCount {


    public void main(String[] args) throws Exception {
        String language = "English";
        Map<String, Map<String, String>> map = Collections.emptyMap();
        File codedData = new File("/home/ubuntu/data");
        BufferedReader br = new BufferedReader(new FileReader(codedData));
        String decoded, coded;
        Map<String, Integer> freq = Collections.emptyMap();

        while ((coded = br.readLine()) != null)
        {
            decoded = decode(coded, language, map);
            if(freq.containsKey(decoded))
            {
                int tmp = freq.get(decoded) + 1;
                freq.put(decoded, tmp);
            }
            else
            {
                freq.put(decoded, 1);
            }

        }

        for (Map.Entry<String,Integer> entry : freq.entrySet()) {
            System.out.println("Word = " + entry.getKey() +
                    ", Frequency = " + entry.getValue());
        }


    }



==================================================== End Question 4 ====================================================
¬===================================================== END OF EXAM =====================================================