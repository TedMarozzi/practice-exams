¬===================================================== Question 1 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================

------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------

- Abstraction is a way to hide unnecessary information and only display important data.
- In object-oriented programming, abstraction can be achieved by seperating unrelated information into their own class.
- Each class has its own attributes and methods which relate to the class.

------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                          
------------------------------------------------------------------------------------------------------------------------

- A class is immutable when it cannot be changed once it has been initialised.
- To create an immutable class, the class must be final.
- attributes must be declared as final


------------------------------------------------------------------------------------------------------------------------
                                                         Part C                                                          
------------------------------------------------------------------------------------------------------------------------

- The factory method is used to create objects, the factory creates such objects.
- The product is an abstract class theat generalises the objects being created/produced by the factory.
- The creator creates different objects by generalising them.
- Real-World example: Creating a car which has many components like the wheels, doors, seats.
------------------------------------------------------------------------------------------------------------------------
                                                         Part D                                                          
------------------------------------------------------------------------------------------------------------------------

The stream pipeline gets a plague from every person(ln 2) that has a plague and finds the plague that's killed
 over 1,000,000 people (ln 3). Then the pipeline gets the name of all such plagues (ln 4) and collects them into a list
 (ln 5).

 this can be used to find the deadliest plagues that have occurred.




==================================================== End Question 1 ====================================================



¬===================================================== Question 2 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================
------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------

public abstract class Person {
    private String name;
    private int age;
}

public class Royalty extends Person{
    private List<Servant> servants = new ArrayList<Servant>();
    private Castle[] castles = new Castle[3];

    public float totalWealth() {
        return 0;
    }
}

public abstract class Slave extends Person {
    private float cost;
    // public, since they share their passivity
    public boolean passive = true;
}


public class Servant extends Slave{
    private Person commander;
}

public class Guard extends Slave {
}

public class Castle {
    private float value;
    private List<Guard> guards = new ArrayList<Guard>();
    private Royalty owner;
}

------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                         
------------------------------------------------------------------------------------------------------------------------

Test Case 1:
Description: ensure a person age is non-negative
Input: construct a person with a negative age
Output: throw an exception

Test Case 2:
Description: Ensure that a castle owner does not have more than 3 castles. One castle must be "acquired" from others.git ad .
Input: add castle to castle owner
Output: replace new castle with an old castle, so the old castle has been "acquired" from others

==================================================== End Question 2 ====================================================
 


¬===================================================== Question 3 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================
------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------

public abstract class Sensor {
    private int id;

    public Sensor(int id) {
        this.id = id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public abstract float measure();

    @Override
    public String toString() {
        return "Sensor{" +
                "id=" + id +
                '}';
    }
}

------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                          
------------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.List;

public class Car {
    private boolean poweredOn = false;
    private float dangerThreshold;
    private List<Sensor> sensors = new ArrayList<Sensor>();

    public Car(boolean poweredOn, float dangerThreshold, List sensors) {
        this.poweredOn = poweredOn;
        this.dangerThreshold = dangerThreshold;
        this.sensors = sensors;
    }

    private int measureSensors(){
        int numDangerSensors = 0;
        for (Sensor sensor: sensors) {
            System.out.println("Sensor [" + sensor.getId() + "]: " + sensor.measure());
            if (sensor.measure() > dangerThreshold) {
                numDangerSensors++;
            }
        }
        System.out.println(numDangerSensors + " sensors above threshold");
        return numDangerSensors;
    }

    private boolean dangerImminent(){
        return sensors.size()<4 || measureSensors() >= 7;
    }

    public void run() {
        poweredOn = true;
        while (poweredOn) {
            if (dangerImminent()) {
                poweredOn = false;
            }
            operate();
        }
    }

    private void operate() {}

}

==================================================== End Question 3 ====================================================



¬===================================================== Question 4 ======================================================
============================================= REMINDER: COMMIT YOUR CHANGES ============================================
------------------------------------------------------------------------------------------------------------------------
                                                         Part A                                                          
------------------------------------------------------------------------------------------------------------------------

import java.util.Map;

public class Decoder {
    public String decode(String message, String language,
                         Map<String, Map<String,String>> map) {
        if (!map.containsKey(language)) {
            //throw new LanguageNotFoundException("'" + language + "' language not found");
        }
        if (message.length() % 4 != 0) {
            String addZeroes = "";
            for (int i=0; i<4-message.length()%4;i++) {
                addZeroes += '0';
            }
            message = addZeroes + message;
        }

        Map<String,String> allCodes = map.get(language);
        String code;
        String decodedMessage = "";
        for (int j=0; j<message.length()/4;j++) {
            code = message.substring(j * 4,j * 4 + 4);
            if (allCodes.containsKey(code)) {
                decodedMessage += allCodes.get(code);
            } else {
                //throw new InvalidCodeException("'" + code + "' not found in " + language + " dictionary");
            }
        }
        return decodedMessage;
    }
}


------------------------------------------------------------------------------------------------------------------------
                                                         Part B                                                          
------------------------------------------------------------------------------------------------------------------------


import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class WordCount {


    public static void main(String[] args) {
        try (BufferedReader br =
                new BufferedReader(new FileReader("home/ubuntu/data/codedString.dat"))) {
            String text;
            Decoder decoder = new Decoder();
            String language = "English";
            Map<String, Map<String, String>> map = new HashMap<>();
            Map<String, String> english = new HashMap<>();
            english.put("0001", "Hello");
            english.put("0002", " ");
            english.put("0003", "World");
            map.put(language, english);

            Map<String, Integer> freq = new HashMap<>();
            while ((text = br.readLine()) != null) {
                String decodedText =decoder.decode(text, language, map);
                String[] words = decodedText.split(" ");
                for (String word : words) {
                    if (freq.containsKey(word)) {
                        int currfreq = freq.get(word);
                        freq.replace(word, currfreq+1);
                    } else {
                        freq.put(word, 1);
                    }
                }
            }
            final Map<String, Integer> sortedByCount = freq.entrySet()
                    .stream()
                    .sorted((Map.Entry.<String, Integer>comparingByValue().reversed()))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
            System.out.println(sortedByCount);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


==================================================== End Question 4 ====================================================
¬===================================================== END OF EXAM =====================================================